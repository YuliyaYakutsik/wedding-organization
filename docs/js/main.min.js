"use strict";$(document).ready(function(){$.modules.main.init()}),function(){if(!("modules"in $&&"advantages"in $.modules)){var e=function(){var e=this;e.setupListener=function(){$(window).on("resize",e.animateAdvantages)},e.equalHeight=function(){var e=$(".advantages__item__title");e.matchHeight()},e.animateAdvantages=function(){var e=$(".advantages__list");$(window).width()<="640"?e.hasClass("owl-carousel")||(e.addClass("owl-carousel").addClass(".owl-theme"),e.on("initialized.owl.carousel",function(){var e=$(".advantages__item");e.matchHeight()}),e.owlCarousel({loop:!0,items:1,smartSpeed:300,mouseDrag:!1})):e.hasClass("owl-carousel")&&(e.removeClass("owl-carousel").removeClass(".owl-theme"),e.trigger("destroy.owl.carousel"))},e.init=function(){e.equalHeight(),e.animateAdvantages(),e.setupListener()}};"modules"in $||($.modules={}),$.modules.advantages=new e}}(),function(){if(!("modules"in $&&"header"in $.modules)){var e=function(){var e=this;e.setupListener=function(){$(window).on("resize",e.showHeaderMenu),$(".header__preview__link").on("click",e.goToTop),$(".header__burger-menu__link").on("click",e.burgerMenu)},e.showHeaderMenu=function(){var e=$(".header__menu");$(window).width()>="1024"&&e.hasClass("header__menu_burger_active")&&(e.removeClass("header__menu_burger_active"),$(".header__burger-menu__link").removeClass("header__burger-menu__link_active"))},e.goToTop=function(e){e.preventDefault(),$("body, html").animate({scrollTop:0},600)},e.burgerMenu=function(e){e.preventDefault(),$(this).hasClass("header__burger-menu__link_active")?($(this).removeClass("header__burger-menu__link_active"),$(".header__menu").removeClass("header__menu_burger_active"),$("html").removeClass("fixed")):($(this).addClass("header__burger-menu__link_active"),$(".header__menu").addClass("header__menu_burger_active"),$("html").addClass("fixed"))},e.init=function(){e.setupListener()}};"modules"in $||($.modules={}),$.modules.header=new e}}(),function(){if(!("modules"in $&&"main"in $.modules)){var e=function(){var e=this;e.window=$(window),e.html=$("html"),e.body=$("body"),e.modules=$.modules,e.initModules=function(){for(var i in e.modules)e.modules.hasOwnProperty(i)&&"undefined"!=typeof e.modules[i].init&&"main"!==i&&e.modules[i].init()},e.init=function(){e.initModules()}};"modules"in $||($.modules={}),$.modules.main=new e}}(),function(){if(!("modules"in $&&"menu"in $.modules)){var e=function(){var e=this;e.setupListener=function(){window.location.hash&&e.showSection(window.location.hash,!1),$(window).on("scroll",e.checkSection),$(".menu__link").on("click",function(i){i.preventDefault(),$(".header__menu").hasClass("header__menu_burger_active")?e.showSection($(this).attr("href"),!1):e.showSection($(this).attr("href"),!0),$("html").removeClass("fixed"),$(".header__burger-menu__link").removeClass("header__burger-menu__link_active"),$(".header__menu").removeClass("header__menu_burger_active")})},e.checkSection=function(){$("section").each(function(){var e=$(this);if(e.data("section")){var i=e.offset().top-250,n=i+e.height(),a=$(window).scrollTop();if(i<a&&n>a){var t=e.data("section"),o=$(".menu__link").filter('[href="#'+t+'"]');if(o.closest(".menu__item").addClass("menu__item_active").siblings().removeClass("menu__item_active"),window.location.hash=t,"main"===e.data("section")){var s=$(".menu__item");s.removeClass("menu__item_active")}}}})},e.showSection=function(e,i){var n=e.replace(/#/,""),a=$("section").filter('[data-section="'+n+'"]'),t=a.offset().top-$(".header").height();i?$("body, html").animate({scrollTop:t},600):$("body, html").scrollTop(t)},e.init=function(){e.setupListener()}};"modules"in $||($.modules={}),$.modules.menu=new e}}(),function(){if(!("modules"in $&&"map"in $.modules)){var e=function(){var e=this;e.insertMap=function(){for(var e=[{featureType:"water",stylers:[{color:"#1869da"}]},{featureType:"landscape",elementType:"geometry.fill",stylers:[{color:"#ffffff"}]},{featureType:"landscape.man_made",elementType:"all",stylers:[{saturation:"-70"}]},{featureType:"landscape.natural",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"poi.park",elementType:"all",stylers:[{color:"#EEEEEE"}]},{featureType:"road",elementType:"all",stylers:[{lightness:"-5"}]},{featureType:"transit",elementType:"labels",stylers:[{visibility:"off"}]}],i=new google.maps.Map(document.getElementById("map"),{center:{lat:53.929847,lng:27.57642},styles:e,disableDefaultUI:!0,zoom:13,backgroundColor:"rgba(24,105,218,.04)"}),n=$(".map").data("markers"),a={url:"images/vis-pin-map.png"},t=[],o=[],s=function(e){var s=new google.maps.Marker({position:{lat:n[e].lat,lng:n[e].lng},map:i,animation:google.maps.Animation.DROP,icon:a}),l='<div class="map-info__title">'+n[e].title+"</div>",r='<div class="map-info__text">'+n[e].address+"</div>",u=l+r,d=new google.maps.InfoWindow({content:u});t.push(s),o.push(d),s.addListener("click",function(){for(var e=0;e<t.length;e++)o[e].close(i,t[e]);d.open(i,s)})},l=0;l<n.length;l++)s(l)},e.init=function(){e.insertMap()}};"modules"in $||($.modules={}),$.modules.map=new e}}(),function(){if(!("modules"in $&&"owl"in $.modules)){var e=function(){var e=this;e.countItems=function(e,i){var n=" "+e.length;i.data("items",e.length),i.text(n)}};"modules"in $||($.modules={}),$.modules.owl=new e}}(),function(){if(!("modules"in $&&"reviews"in $.modules)){var e=function(){var e=this;e.openFullReview=function(){$(".review__href").fancybox({type:"inline",maxWidth:460,padding:0,closeBtn:!1})},e.init=function(){e.openFullReview()}};"modules"in $||($.modules={}),$.modules.reviews=new e}}(),function(){if(!("modules"in $&&"steps"in $.modules)){var e=function(){var e=this;e.setupListener=function(){$(window).on("resize",e.animateSteps)},e.equalHight=function(){var e=$(".steps__item");e.matchHeight()},e.animateSteps=function(){var e=$(".steps__list"),i=e.next(".owl-navigation"),n=i.find(".owl-navigation__all-pages");$(window).width()<="1023"?e.hasClass("owl-carousel")?n.text($(".steps__list").next(".owl-navigation").find(".owl-navigation__all-pages").data("items")-(Math.floor(e.width()/$(".steps__item").innerWidth())-1)):(e.addClass("owl-carousel").addClass(".owl-theme"),e.on("initialized.owl.carousel",function(a){var t=$(".steps__item"),o=i.find(".owl-navigation__active-page");t.addClass("steps__item_carousel"),t.matchHeight(),o.text("1 "),i.addClass("owl-navigation_active"),i.find(".owl-navigation__link_prev").addClass("disabled"),n.text(a.item.count-(Math.floor(e.width()/t.innerWidth())-1))}),e.owlCarousel({loop:!1,items:1,autoWidth:!0,slideBy:1,smartSpeed:300,mouseDrag:!1,info:!0,responsive:{641:{items:4,autoWidth:!0,margin:0,slideBy:1}}}),e.on("changed.owl.carousel",function(){var n=e.find(".owl-dot.active").index(),a=n+1+" ",t=i.find(".owl-navigation__active-page");t.text(a),0===n?i.find(".owl-navigation__link_prev").addClass("disabled"):i.find(".owl-navigation__link_prev").removeClass("disabled"),(n+1).toString()===i.find(".owl-navigation__all-pages").text().replace(" ","")?i.find(".owl-navigation__link_next").addClass("disabled"):i.find(".owl-navigation__link_next").removeClass("disabled")}),i.find(".owl-navigation__link").on("click",function(i){i.preventDefault();var n=$(this);n.hasClass("owl-navigation__link_prev")?e.trigger("prev.owl.carousel"):e.trigger("next.owl.carousel")})):e.hasClass("owl-carousel")&&(e.off("changed.owl.carousel"),e.removeClass("owl-carousel").removeClass(".owl-theme"),i.find(".owl-navigation__link").off(),e.next(".owl-navigation").removeClass("owl-navigation_active"),e.trigger("destroy.owl.carousel"),$(".steps__item").removeClass("steps__item_carousel"))},e.init=function(){e.equalHight(),$.modules.owl.countItems($(".steps__item"),$(".steps__list").next(".owl-navigation").find(".owl-navigation__all-pages")),e.animateSteps(),e.setupListener()}};"modules"in $||($.modules={}),$.modules.steps=new e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
